// Auto-generated mock file for @atc/common
module.exports = {
  errorMessage: {
    BRAND: {
      NOT_FOUND: 'Not Found',
    },
    OTHER: {
      INVALID_MIME_TYPE: 'Invalid Mime Type',
      SOMETHING_WENT_WRONG: 'Something Went Wrong',
    },
    PRODUCT: {
      BARCODE_ALREADY_EXISTS: 'Barcode Already Exists',
      BRAND_NAME_EXISTS: 'Brand Name Exists',
      BRAND_NAME_REQUIRED: 'Brand Name Required',
      BRAND_NOT_FOUND: 'Brand Not Found',
      CATEGORY_ALREADY_EXISTS: 'Category Already Exists',
      CATEGORY_ID_REQUIRED: 'Category Id Required',
      CATEGORY_NAME_REQUIRED: 'Category Name Required',
      CATEGORY_NOT_FOUND: 'Category Not Found',
      EITHER_IMAGE_OR_IMAGE_URL: 'Either Image Or Image Url',
      FAILED_TO_UPDATE_PRODUCT_IN_ELASTIC: 'Failed To Update Product In Elastic',
      ID_OR_BARCODE_REQUIRED: 'Id Or Barcode Required',
      INCREASE_KEYWORD: 'Increase Keyword',
      MIN_AND_MAX_BOTH_REQUIRED: 'Min And Max Both Required',
      MIN_PRICE_GREATER_THAN_MAX_PRICE: 'Min Price Greater Than Max Price',
      NOT_FOUND: 'Not Found',
      NO_PRICING_DATA: 'No Pricing Data',
      PARENT_CATEGORY_NOT_FOUND: 'Parent Category Not Found',
      POTENTIAL_MATCH_NOT_FOUND: 'Potential Match Not Found',
      PRODUCT_ALREADY_EXISTS: 'Product Already Exists',
      PRODUCT_ID_REQUIRED: 'Product Id Required',
      PRODUCT_NOT_FOUND: 'Product Not Found',
      PRODUCT_TO_BE_MATCH_NOT_FOUND: 'Product To Be Match Not Found',
      PROVIDE_AT_LEAST_ONE_PARAMETER: 'Provide At Least One Parameter',
      PROVIDE_VALID_PARAMETER_VALUE: 'Provide Valid Parameter Value',
      RETAILER_ALREADY_EXISTS: 'Retailer Already Exists',
      RETAILER_NOT_FOUND: 'Retailer Not Found',
      SUB_CATEGORY_NOT_FOUND: 'Sub Category Not Found',
      UPDATED: 'Updated',
    },
    SUPPLIER: {
      ALREADY_EXISTS: 'Already Exists',
      BRAND_ALREADY_ASSOCIATED: 'Brand Already Associated',
      NOT_FOUND: 'Not Found',
    },
  },
  responseMessage: {
    EMAIL: {
      MAIL_SENT: 'Mail Sent successfully',
    },
    OTHER: {
      DATA_FOUND: 'Data Found successfully',
      DATA_NOT_FOUND: 'Data Not Found successfully',
    },
    PRODUCT: {
      ADDED: 'Added successfully',
      ADD_PRODUCT_SUCCESS: 'Add Product Success successfully',
      BARCODE_ADDED: 'Barcode Added successfully',
      BARCODE_EXISTS: 'Barcode Exists successfully',
      BARCODE_NOT_EXISTS: 'Barcode Not Exists successfully',
      BRAND_ADDED: 'Brand Added successfully',
      BRAND_UPDATED: 'Brand Updated successfully',
      CATEGORY_ADDED: 'Category Added successfully',
      CATEGORY_LIST_FETCHED: 'Category List Fetched successfully',
      CATEGORY_UPDATED: 'Category Updated successfully',
      DELETE_CATEGORY_SUCCESS: 'Delete Category Success successfully',
      DELETE_PRODUCT_SUCCESS: 'Delete Product Success successfully',
      MATCH_PRODUCT_SUCCESS: 'Match Product Success successfully',
      RETAILER_ADDED: 'Retailer Added successfully',
      RETAILER_UPDATED: 'Retailer Updated successfully',
      SEARCH_SUCCESS: 'Search Success successfully',
      SUCCESS: 'Success successfully',
      TOGGLE_INTERVENTION: 'Toggle Intervention successfully',
      UPDATE_SUCCESS: 'Update Success successfully',
    },
    PRODUCT_GROUP: {
      PRODUCTS_RETRIEVED: 'Products Retrieved successfully',
    },
    SUPPLIER: {
      CREATED: 'Created successfully',
      RETRIEVED: 'Retrieved successfully',
      UPDATED: 'Updated successfully',
    },
  },
  UserRoleEnum: {
    ADMIN: 'ADMIN',
  },
  ChartType: {
    MONTHLY: 'MONTHLY',
    WEEKLY: 'WEEKLY',
    YEARLY: 'YEARLY',
  },
  constants: jest.fn(),
  elasticClient: jest.fn(),
  importExcelToDB: jest.fn(),
  putS3Object: jest.fn(),
  SearchResponse: {
    // Add enum values as needed
  },
  utilFns: jest.fn(),
};
